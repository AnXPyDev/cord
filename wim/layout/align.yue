Layout = require "cord.wim.layout.base"
Negotiator = require "cord.wim.layout.negotiator"
Vector = require "cord.math.vector"
crush = (require "cord.table").crush
log = require "cord.log"

att = {
	top: 1
	left: 1
	start: 1
	center: 2
	middle: 2
	bottom: 3
	finish: 3
	right: 3
	end: 3
}

dtt = {
	x: "x"
	y: "y"
	horizontal: "x"
	vertical: "y"
}

opposite_c = (c) ->
	if c == "x"
		return "y"
	return "x"

class Align extends Layout
	@__name: "cord.wim.layout.align"
	
	defaults: crush({}, Layout.defaults, {
		direction: "horizontal"
	})

	new: (config, ...) =>
		super(config, ...)

		@data\set("direction", @style\get("direction"))

		init_child = (child) ->
			if not child
				return
			child\mute_signal("geometry_changed::layout")
			child\request_property("layout_align")
			child\request_property("layout_justify")
			child\request_property("size_priority")
			child\request_property("flexible")
			child\request_property("min_size")
			child\request_property("max_size")
			child\request_property("preferred_size")
			child\unmute_signal("geometry_changed::layout")

		for i, child in ipairs @children
			init_child(child)

		@connect_signal("added_child", init_child)
	
	init_child: (child) ->


	apply_layout: =>
		context = @\get_size!
		dir = @data\get("direction")

		cp = dtt[dir]
		cs = opposite_c(cp)

		avl_space = context\copy!

		results = {{}, {} ,{}}
		flexible = {}

		for i, child in ipairs @children
			ix = att[child.data\get("layout_align")] or 2

			if child.data\get("preferred_visible") == false
				table.insert(results[ix], {child})
				continue

			if child.data\get("flexible")
				table.insert(flexible, child)
				table.insert(results[ix], {child})
				continue
			
			child_size = child\get_size("layout")

			if child_size.x > avl_space.x or child_size.y > avl_space.y
				table.insert(results[ix], {child})
				continue
			
			avl_space[cp] -= child_size[cp]

			table.insert(results[ix], {child, child_size})
		
		negotiation = Negotiator(cp, size, avl_space, flexible)

		start_bound = 0
		stop_bound = 0

		place_child = (child, size, corner) ->

			j = att[child.data\get("layout_justify")] - 1

			pos = Vector!
			pos[cp] = corner
			pos[cs] = (context[cs] - size[cs]) * 0.5 * j

			child\set_pos(pos)

		for i, e in ipairs results[1]
			size = e[2]

			e[1]\mute_signal("geometry_changed::layout")
		
			unless size
				size = negotiation[e[1]]
				if size
					e[1]\set_size(size)
				else
					e[1]\set_visible(false)
					e[1]\unmute_signal("geometry_changed::layout")
					continue
			
			e[1]\set_visible(true)

			place_child(e[1], size, start_bound)
			
			start_bound += size[cp]

			e[1]\unmute_signal("geometry_changed::layout")

		for i = #results[3], 1, -1
			e = results[3][i]
			size = e[2]

			e[1]\mute_signal("geometry_changed::layout")
		
			if not size
				size = negotiation[e[1]]
				if size
					e[1]\set_size(size)
				else
					e[1]\set_visible(false)
					e[1]\unmute_signal("geometry_changed::layout")
					continue
			
			e[1]\set_visible(true)

			
			stop_bound += size[cp]
			
			place_child(e[1], size, context[cp] - stop_bound)

			e[1]\unmute_signal("geometry_changed::layout")

	
		center_sizes = {}
		center_size = 0
		
		for i, e in ipairs results[2]
			size = e[2]

			e[1]\mute_signal("geometry_changed::layout")
		
			unless size
				size = negotiation[e[1]]
				if size
					e[1]\set_size(size)
				else
					e[1]\set_visible(false)
					e[1]\unmute_signal("geometry_changed::layout")
					continue

			e[1]\set_visible(true)

			center_size += size[cp]
			center_sizes[i] = size
			


		--center_start = math.min(math.max(start_bound, (context[cp] + center_size) * 0.5) + center_size, stop_bound) - center_size
		center_start = (context[cp] - center_size) * 0.5

		if stop_bound > center_start
			center_start = (context[cp] - stop_bound) - center_size
		elseif start_bound > center_start
			center_start = start_bound

		for i, e in ipairs results[2]
			size = center_sizes[i]
			
			unless size
				continue

			place_child(e[1], size, center_start)
			center_start += size[cp]
			
			e[1]\unmute_signal("geometry_changed::layout")

return Align
